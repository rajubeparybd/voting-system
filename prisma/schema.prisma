generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  CANDIDATE
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  studentId     String?   @unique
  email         String?   @unique
  password      String?
  role          Role[]      @default([USER])
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ClubStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Club {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  status      ClubStatus @default(ACTIVE)
  open_date   DateTime?
  members     String[]   @db.ObjectId
  positions   String[]   @default([])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  nominations Nomination[]
}

enum NominationStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

model Nomination {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  clubId      String           @db.ObjectId
  club        Club             @relation(fields: [clubId], references: [id], onDelete: Cascade)
  position    String
  description String
  status      NominationStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  applications Application[]
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Application {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  nominationId String            @db.ObjectId
  nomination   Nomination        @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  userId       String            @db.ObjectId
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  statement    String
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}
